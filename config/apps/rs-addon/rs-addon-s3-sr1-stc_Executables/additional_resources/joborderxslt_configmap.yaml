apiVersion: v1
kind: ConfigMap
metadata:
  name: s3-sr1-stc-joborderxslt
  namespace: processing

data:
  jobOrder.xslt: |
    <?xml version="1.0" encoding="UTF-8"?>
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
      
      <xsl:output version="1.0" method="xml" omit-xml-declaration="no"
        standalone="yes" indent="yes" />
      
      <xsl:template match="List_of_Dynamic_Processing_Parameters">
        <List_of_Dyn_Processing_Parameters>
          <xsl:apply-templates select="@*|node()"/>
        </List_of_Dyn_Processing_Parameters>
      </xsl:template>
      
      <xsl:template match="Dynamic_Processing_Parameter">
        <Dyn_Processing_Parameter>
          <xsl:apply-templates select="@*|node()"/>
        </Dyn_Processing_Parameter>
      </xsl:template>
      
      <xsl:template match="Config_Files">
        <List_of_Config_Files>
          <xsl:apply-templates select="@*|node()"/>
        </List_of_Config_Files>
      </xsl:template>
      
      <xsl:template match="Conf_File_Name">
        <Config_File>
          <xsl:apply-templates select="@*|node()"/>
        </Config_File>
      </xsl:template>

      <xsl:template match="Input">
        <xsl:if test="File_Type != ''">
          <xsl:choose>
            <xsl:when test="File_Name_Type[text()='Regexp']">
              <xsl:element name="Input">
                <xsl:variable name="fileName" select="current()/List_of_File_Names/File_Name" />

                <xsl:element name="File_Type">
                  <xsl:value-of select="current()/File_Type" />
                </xsl:element>
                <xsl:element name="File_Name_Type">
                  <xsl:value-of select="current()/File_Name_Type" />
                </xsl:element>
                <xsl:element name="List_of_File_Names">
                  <xsl:attribute name="count">1</xsl:attribute>
                  <xsl:element name="File_Name">
                    <xsl:call-template name="stripLast">
                        <xsl:with-param name="pText" select="$fileName" />
                      </xsl:call-template>
                  </xsl:element>
                </xsl:element>
                <xsl:element name="List_of_Time_Intervals">
                  <xsl:attribute name="count">1</xsl:attribute>
                  <xsl:element name="Time_Interval">
                    <xsl:element name="Start">
                      <xsl:value-of select="current()/List_of_Time_Intervals/Time_Interval/Start" />
                    </xsl:element>
                    <xsl:element name="Stop">
                      <xsl:value-of select="current()/List_of_Time_Intervals/Time_Interval/Stop" />
                    </xsl:element>
                    <xsl:element name="File_Name">
                      <xsl:call-template name="stripLast">
                        <xsl:with-param name="pText" select="$fileName" />
                      </xsl:call-template>
                    </xsl:element>
                  </xsl:element>
                </xsl:element>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <xsl:element name="Input">
                <xsl:apply-templates select="@*|node()" />
              </xsl:element>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </xsl:template>
      
      <!-- Copy Template -->
      <xsl:template match="@*|node()">
        <xsl:copy>
          <xsl:apply-templates select="@*|node()" />
        </xsl:copy>
      </xsl:template>

      <!-- Strip last template (https://stackoverflow.com/questions/11166784/xslt-1-0-finding-the-last-occurence-and-taking-string-before) -->
      <xsl:template name="stripLast">
        <xsl:param name="pText"/>
        <xsl:param name="pDelim" select="'/'"/>

          <xsl:if test="contains($pText, $pDelim)">
            <xsl:value-of select="substring-before($pText, $pDelim)"/>
            <xsl:value-of select="$pDelim"/>
            <xsl:call-template name="stripLast">
              <xsl:with-param name="pText" select=
              "substring-after($pText, $pDelim)"/>
              <xsl:with-param name="pDelim" select="$pDelim"/>
            </xsl:call-template>
          </xsl:if>
        </xsl:template>
        
    </xsl:stylesheet>
