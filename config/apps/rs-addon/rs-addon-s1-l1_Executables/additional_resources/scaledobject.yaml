# Copyright 2023 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  finalizers:
  - finalizer.keda.sh
  generation: 2
  labels:
    app.kubernetes.io/instance: s1-l1-low
    scaledobject.keda.sh/name: s1-l1-low
  name: s1-l1-low
  namespace: processing
spec:
  scaleTargetRef:
    apiVersion:    apps/v1
    kind:          deployment
    name:          s1-l1-part3-execution-worker-low-v1
    envSourceContainerName: s1-l1-part3-execution-worker-low-v1
  pollingInterval:  30
  cooldownPeriod:   1200
  minReplicaCount:  0
  maxReplicaCount:  3
  advanced:
    restoreToOriginalReplicaCount: true
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 1200
          policies:
            - type: Pods
              value: 1
              periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 30
  triggers:
    - type: prometheus
      metadata:
        # Required fields:
        serverAddress: http://thanos-query.monitoring.svc.cluster.local:9090
        metricName: "kafka_consumergroup_lag" 
        query: sum(kafka_consumergroup_lag{consumergroup=~"s1-l1-part3.*",topic=~".*priority-filter-low.*"}>=0)
        threshold: '5'
        activationThreshold: '0' 


---


apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  finalizers:
  - finalizer.keda.sh
  generation: 2
  labels:
    app.kubernetes.io/instance: s1-l1-medium
    scaledobject.keda.sh/name: s1-l1-medium
  name: s1-l1-medium
  namespace: processing
spec:
  scaleTargetRef:
    apiVersion:    apps/v1
    kind:          deployment
    name:          s1-l1-part2-execution-worker-medium-v1
    envSourceContainerName: s1-l1-part2-execution-worker-medium-v1
  pollingInterval:  30
  cooldownPeriod:   1200
  minReplicaCount:  0
  maxReplicaCount:  3
  advanced:
    restoreToOriginalReplicaCount: true
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 1200
          policies:
            - type: Pods
              value: 1
              periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 30
  triggers:
    - type: prometheus
      metadata:
        # Required fields:
        serverAddress: http://thanos-query.monitoring.svc.cluster.local:9090
        metricName: "kafka_consumergroup_lag" 
        query: sum(kafka_consumergroup_lag{consumergroup=~"s1-l1-part2.*",topic=~".*priority-filter-medium.*"}>=0)
        threshold: '5'
        activationThreshold: '0' 

---

apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  finalizers:
  - finalizer.keda.sh
  generation: 2
  labels:
    app.kubernetes.io/instance: s1-l1-high
    scaledobject.keda.sh/name: s1-l1-high
  name: s1-l1-high
  namespace: processing
spec:
  scaleTargetRef:
    apiVersion:    apps/v1
    kind:          deployment
    name:          s1-l1-part1-execution-worker-high-v1
    envSourceContainerName: s1-l1-part1-execution-worker-high-v1
  pollingInterval:  30
  cooldownPeriod:   1200
  minReplicaCount:  0
  maxReplicaCount:  3
  advanced:
    restoreToOriginalReplicaCount: true
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 1200
          policies:
            - type: Pods
              value: 1
              periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 30
  triggers:
    - type: prometheus
      metadata:
        # Required fields:
        serverAddress: http://thanos-query.monitoring.svc.cluster.local:9090
        metricName: "kafka_consumergroup_lag" 
        query: sum(kafka_consumergroup_lag{consumergroup=~"s1-l1-part1.*",topic=~".*priority-filter-high.*"}>=0)
                      
        threshold: '5'
        activationThreshold: '0' 
