### Compliance to integration procedure v1.10 applied
##    Kafka configuration
#       Set replication count 
app.*.spring.cloud.stream.kafka.binder.replicationFactor=3
app.*.spring.cloud.stream.kafka.streams.binder.replicationFactor=3
app.*.spring.cloud.stream.kafka.streams.binder.configuration.replication.factor=3

#       Set retention for all topic 
# app.*.spring.cloud.stream.kafka.bindings.input.consumer.topic.properties.retention.ms=2678400000
# app.*.spring.cloud.stream.kafka.bindings.input.consumer.s2-l0u-part1.s2-l0u-filter.properties.retention.ms=2678400000
# app.*.spring.cloud.stream.kafka.bindings.input.consumer.s2-l0u-part1.pp-l0u.properties.retention.ms=2678400000
# app.*.spring.cloud.stream.kafka.bindings.input.consumer.s2-l0u-part1.ew-l0u.properties.retention.ms=2678400000

# Set partition count for all topics
app.pw-l0u.spring.cloud.stream.kafka.binder.autoAddPartitions=true
app.pw-l0u.spring.cloud.stream.kafka.binder.minPartitionCount=6

# Set Lag balancing
app.pw-l0u.spring.cloud.stream.kafka.bindings.input.producer.configuration.partitioner.class=esa.s1pdgs.cpoc.message.kafka.LagBasedPartitioner
app.pw-l0u.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.delay-seconds=30
app.pw-l0u.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.consumer-group=s2-ew-l0u
app.pw-l0u.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.topics-with-priority.s2-l0u-part1.ew-l0u=1

# Set Long Processing parameters
app.ew-l0u.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=1
app.ew-l0u.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=7200000

# Set filter parameters
# check performed 

#  Version
app.*.common.rsChainVersion=1.8.0
version.pw-l0u=1.8.0
version.ew-l0u=1.8.0
version.s2-l0u-filter=3.2.1
version.s2-l0u-router=3.2.1


######################## Deployer #################################################################

deployer.*.kubernetes.image-pull-policy=Always
deployer.*.kubernetes.namespace=processing

deployer.*.kubernetes.liveness-probe-delay=10
deployer.*.kubernetes.liveness-probe-path=/actuator/health/liveness
deployer.*.kubernetes.liveness-probe-period=60
deployer.*.kubernetes.liveness-probe-port=8080
deployer.*.kubernetes.liveness-probe-timeout=60
deployer.*.kubernetes.readiness-probe-delay=60
deployer.*.kubernetes.readiness-probe-path=/actuator/health/readiness
deployer.*.kubernetes.readiness-probe-period=60
deployer.*.kubernetes.readiness-probe-port=8080
deployer.*.kubernetes.readiness-probe-timeout=20
deployer.*.kubernetes.max-terminated-error-restarts=3

deployer.pw-l0u.kubernetes.requests.memory=1000Mi
deployer.pw-l0u.kubernetes.limits.memory=4000Mi
deployer.pw-l0u.kubernetes.requests.cpu=300m
deployer.pw-l0u.kubernetes.limits.cpu=2000m

deployer.ew-l0u.kubernetes.requests.memory=2000Mi
deployer.ew-l0u.kubernetes.limits.memory=32000Mi
# We will set request.cpu to 6 cpu (instead of 1 cpu) to avoid collocalisation of EW POD on same node. 
# A best approach would be to have a quota on disk usage (PVC or other solution).
deployer.ew-l0u.kubernetes.requests.cpu=6000m
deployer.ew-l0u.kubernetes.limits.cpu=8000m

deployer.s2-l0u-filter.kubernetes.requests.cpu=160m
deployer.s2-l0u-filter.kubernetes.limits.cpu=300m
deployer.s2-l0u-filter.kubernetes.requests.memory=512Mi
deployer.s2-l0u-filter.kubernetes.limits.memory=600Mi

deployer.s2-l0u-router.kubernetes.requests.cpu=160m
deployer.s2-l0u-router.kubernetes.limits.cpu=300m
deployer.s2-l0u-router.kubernetes.requests.memory=400Mi
deployer.s2-l0u-router.kubernetes.limits.memory=600Mi


######################## App specific #############################################################


### Router
app.s2-l0u-router.spring.cloud.stream.bindings.input.group=s2-l0u-router
app.s2-l0u-router.refresh-delay=30
app.s2-l0u-router.script=file:/etc/router-ew.groovy
deployer.s2-l0u-router.kubernetes.volume-mounts=[ {name: script, mountPath: '/etc/router-ew.groovy', subPath: 'router-ew.groovy' } ]
deployer.s2-l0u-router.kubernetes.volumes=[ {name: script, configmap: { name: s2-l0u-router-ew-script } } ]

### Catalog config
app.pw-l0u.catalog.url=http://rs-metadata-catalog-searchcontroller-svc.processing.svc.cluster.local:8080
app.pw-l0u.catalog.timeout=5

### Chain config
app.*.chain.name=s2-l0u
app.*.chain.version=1.8.0

### Mongo config
app.pw-l0u.mongo.authenticationDatabase=admin
app.pw-l0u.mongo.database=s2-l0u-pw
app.pw-l0u.mongo.port=27017
app.pw-l0u.mongo.host=mongodb-0.mongodb-headless.database.svc.cluster.local

### Obs properties
app.*.obs.endpoint=https://oss.eu-west-0.prod-cloud-ocb.orange-business.com
app.*.obs.region=eu-west-0
app.*.obs.maxConcurrency=50
app.*.obs.maxThroughput=10
app.*.obs.minimumPartSize=5
app.*.obs.maxRetries=3
app.*.obs.downloadTimeout=15
app.*.obs.uploadTimeout=15
app.*.obs.bucket.auxBucket=ops-rs-s2-aux
app.*.obs.bucket.sessionBucket=ops-rs-session-files
app.*.obs.bucket.sadBucket=ops-rs-s2-sadata
app.*.obs.bucket.hktmBucket=ops-rs-s2-hktm

### Cleanup config
app.*.cleanup.localEnabled=true
app.*.cleanup.sharedEnabled=true
app.*.cleanup.hours=144

### Kafka Config
app.*.spring.kafka.bootstrap-servers=kafka-cluster-kafka-bootstrap.infra.svc.cluster.local:9092
app.*.spring.cloud.stream.kafka.binder.brokers=kafka-cluster-kafka-bootstrap.infra.svc.cluster.local:9092
app.*.spring.cloud.stream.kafka.binder.auto-create-topics=true
app.*.spring.cloud.stream.kafka.bindings.input.consumer.enable-dlq=true
app.*.spring.cloud.stream.kafka.bindings.input.consumer.dlq-name=error-warning
app.*.spring.cloud.stream.kafka.bindings.input.consumer.poll-timeout=5
app.*.spring.cloud.stream.bindings.input.consumer.max-attempts=1

app.pw-l0u.spring.cloud.stream.bindings.input.group=s2-l0u-pw
app.ew-l0u.spring.cloud.stream.bindings.input.group=s2-l0u-ew

### Preparation worker
app.pw-l0u.spring.profiles.active=prod
deployer.pw-l0u.kubernetes.secret-refs=s2-l0u-pw
deployer.pw-l0u.kubernetes.podSecurityContext={runAsUser: 1000}

###Filter
app.s2-l0u-filter.spring.cloud.stream.bindings.input.group=s2-l0u-filter
app.s2-l0u-filter.expression=((payload.additionalFields == null) || (payload.additionalFields.f5 != 'true')) &&  ( (payload.missionId=='S2' and (payload.productFamily=='S2_AUX' or payload.productFamily=='EDRS_SESSION')))
app.s2-l0u-filter.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=50
app.s2-l0u-filter.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=600000
app.s2-l0u-filter.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=false

### Execution worker
app.ew-l0u.spring.profiles.active=prod
app.ew-l0u.ps2.sharedFolderRoot=/shared
deployer.ew-l0u.kubernetes.secret-refs=s2-l0u-ew
deployer.ew-l0u.kubernetes.podSecurityContext={runAsUser: 1000}
deployer.ew-l0u.kubernetes.volume-mounts=[ { name: shared, mountPath: '/shared' } ]
deployer.ew-l0u.kubernetes.volumes=[ { name: shared, persistentVolumeClaim: { claimName: 's2-l0-shared', storageClassName: 'ceph-fs' } } ]

deployer.*.kubernetes.affinity.nodeAffinity={ requiredDuringSchedulingIgnoredDuringExecution: { nodeSelectorTerms: [ { matchExpressions: [ { key: 'node-role.kubernetes.io/processing', operator: 'In', values: 'common'}]}]}}
deployer.*.kubernetes.tolerations=[{key: 'node-role.kubernetes.io/processing', effect: 'NoSchedule'}]
