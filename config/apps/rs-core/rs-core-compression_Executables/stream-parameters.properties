### Compliance to integration procedure v1.12 applied
## Configure the topic replica
app.*.spring.cloud.stream.kafka.binder.replicationFactor=3
app.*.spring.cloud.stream.kafka.streams.binder.replicationFactor=3
app.*.spring.cloud.stream.kafka.streams.binder.configuration.replication.factor=3

## Configure the topic retention STAND BYE on this configuration
#app.*.spring.cloud.stream.kafka.bindings.input.consumer.topic.properties.retention.ms=2678400000
#app.*.spring.cloud.stream.kafka.bindings.input.consumer.compression-part1.message-filter.properties.retention.ms=2678400000
#app.*.spring.cloud.stream.kafka.bindings.input.consumer.compression-part1.message-filter-high.properties.retention.ms=2678400000
#app.*.spring.cloud.stream.kafka.bindings.input.consumer.compression-part1.message-filter-medium.properties.retention.ms=2678400000
#app.*.spring.cloud.stream.kafka.bindings.input.consumer.compression-part1.message-filter-low.properties.retention.ms=2678400000

## Configure the topic partition count
app.priority-filter-low.spring.cloud.stream.kafka.binder.autoAddPartitions=true
app.priority-filter-low.spring.cloud.stream.kafka.binder.minPartitionCount=30
app.priority-filter-medium.spring.cloud.stream.kafka.binder.autoAddPartitions=true
app.priority-filter-medium.spring.cloud.stream.kafka.binder.minPartitionCount=30
app.priority-filter-high.spring.cloud.stream.kafka.binder.autoAddPartitions=true
app.priority-filter-high.spring.cloud.stream.kafka.binder.minPartitionCount=30



## Set Long processing parameters
app.compression-worker-high.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=1
app.compression-worker-high.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=3600000
app.compression-worker-medium.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=1
app.compression-worker-medium.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=3600000
app.compression-worker-low.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=1
app.compression-worker-low.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=3600000



## Limit and request
deployer.message-filter.kubernetes.requests.memory=512Mi
deployer.message-filter.kubernetes.requests.cpu=160m
deployer.message-filter.kubernetes.limits.memory=600Mi
deployer.message-filter.kubernetes.limits.cpu=300m

deployer.priority-filter-low.kubernetes.requests.memory=512Mi
deployer.priority-filter-low.kubernetes.requests.cpu=160m
deployer.priority-filter-low.kubernetes.limits.memory=600Mi
deployer.priority-filter-low.kubernetes.limits.cpu=300m

deployer.priority-filter-medium.kubernetes.requests.memory=512Mi
deployer.priority-filter-medium.kubernetes.requests.cpu=160m
deployer.priority-filter-medium.kubernetes.limits.memory=600Mi
deployer.priority-filter-medium.kubernetes.limits.cpu=300m

deployer.priority-filter-high.kubernetes.requests.memory=512Mi
deployer.priority-filter-high.kubernetes.requests.cpu=160m
deployer.priority-filter-high.kubernetes.limits.memory=600Mi
deployer.priority-filter-high.kubernetes.limits.cpu=300m

deployer.compression-worker-high.kubernetes.requests.memory=3500Mi
deployer.compression-worker-high.kubernetes.requests.cpu=300m
deployer.compression-worker-high.kubernetes.limits.memory=4000Mi
deployer.compression-worker-high.kubernetes.limits.cpu=1300m

deployer.compression-worker-medium.kubernetes.requests.memory=3500Mi
deployer.compression-worker-medium.kubernetes.requests.cpu=300m
deployer.compression-worker-medium.kubernetes.limits.memory=4000Mi
deployer.compression-worker-medium.kubernetes.limits.cpu=1300m

deployer.compression-worker-low.kubernetes.requests.memory=3500Mi
deployer.compression-worker-low.kubernetes.requests.cpu=300m
deployer.compression-worker-low.kubernetes.limits.memory=4000Mi
deployer.compression-worker-low.kubernetes.limits.cpu=1300m

# General Application properties
app.*.spring.kafka.bootstrap-servers=kafka-cluster-kafka-bootstrap.infra.svc.cluster.local:9092
app.*.main.banner-mode=off
app.*.management.endpoint.health.show-details=always

app.compression-worker-high.logging.config=/log/log4j2.yml
app.compression-worker-medium.logging.config=/log/log4j2.yml
app.compression-worker-low.logging.config=/log/log4j2.yml

# Error Management
app.*.spring.cloud.stream.bindings.input.consumer.maxAttempts=1
app.*.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=true
app.*.spring.cloud.stream.kafka.bindings.input.consumer.dlqName=error-warning

# Prevent auto creation of kafka topics
app.*.spring.cloud.stream.kafka.binder.autoCreateTopics=true


## Set filter parameter (only the first one)
app.message-filter.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=false
app.message-filter.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.records=50
app.message-filter.spring.cloud.stream.kafka.bindings.input.consumer.configuration.max.poll.interval.ms=600000
app.message-filter.filter.function.expression=((payload.additionalFields == null) || (payload.additionalFields.f5 != 'true')) && (   ((payload.productFamily matches '^((S\\d.*)|(L\\d.*))(?<!(ZIP|AUX|JOB|GRANULES|REPORT|ETAD|BLANK)$)$') && (!(payload.productFamily == 'L0_SEGMENT') || ((payload.keyObjectStorage matches 'S1._(GP|HK|RF).*_RAW.*\.SAFE') && !(payload.keyObjectStorage matches 'S1._RF_RAW__0.(HH|HV|VV|VH)_.*\.SAFE'))))    )


#filter HIGH
app.priority-filter-high.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=false
app.priority-filter-high.filter.function.expression=payload.timeliness == 'PT'
app.priority-filter-high.spring.cloud.stream.kafka.bindings.input.producer.configuration.partitioner.class=esa.s1pdgs.cpoc.message.kafka.LagBasedPartitioner
app.priority-filter-high.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.delay-seconds=30
app.priority-filter-high.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.consumer-group=compression-part1
app.priority-filter-high.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.topics-with-priority.compression-part1.priority-filter-high=1

#filter MEDIUM
app.priority-filter-medium.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=false
app.priority-filter-medium.filter.function.expression=payload.timeliness == 'NRT'
app.priority-filter-medium.spring.cloud.stream.kafka.bindings.input.producer.configuration.partitioner.class=esa.s1pdgs.cpoc.message.kafka.LagBasedPartitioner
app.priority-filter-medium.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.delay-seconds=30
app.priority-filter-medium.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.consumer-group=compression-part2
app.priority-filter-medium.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.topics-with-priority.compression-part2.priority-filter-medium=1

#filter LOW
app.priority-filter-low.spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=false
app.priority-filter-low.filter.function.expression= (payload.timeliness != 'PT') && (payload.timeliness != 'NRT')
app.priority-filter-low.spring.cloud.stream.kafka.bindings.input.producer.configuration.partitioner.class=esa.s1pdgs.cpoc.message.kafka.LagBasedPartitioner
app.priority-filter-low.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.delay-seconds=30
app.priority-filter-low.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.consumer-group=compression-part3
app.priority-filter-low.spring.cloud.stream.kafka.binder.producerProperties.lag-based-partitioner.topics-with-priority.compression-part3.priority-filter-low=1

app.compression-worker-high.spring.cloud.stream.function.bindings.compress-in-0=input
app.compression-worker-high.spring.cloud.stream.function.bindings.compress-out-0=output
app.compression-worker-high.spring.cloud.stream.function.definition=compress
app.compression-worker-high.compression-worker.compression-command.s1=/app/zip-compression.sh
app.compression-worker-high.compression-worker.compression-command.s2=/app/tar-compression.sh
app.compression-worker-high.compression-worker.compression-command.s3=/app/zip-nocompression.sh
app.compression-worker-high.compression-worker.workingDirectory=/tmp/compression
app.compression-worker-high.compression-worker.compressionTimeout=4500
app.compression-worker-high.compression-worker.requestTimeout=5000
app.compression-worker-high.compression-worker.hostname=${HOSTNAME}

app.compression-worker-medium.spring.cloud.stream.function.bindings.compress-in-0=input
app.compression-worker-medium.spring.cloud.stream.function.bindings.compress-out-0=output
app.compression-worker-medium.spring.cloud.stream.function.definition=compress
app.compression-worker-medium.compression-worker.compression-command.s1=/app/zip-compression.sh
app.compression-worker-medium.compression-worker.compression-command.s2=/app/tar-compression.sh
app.compression-worker-medium.compression-worker.compression-command.s3=/app/zip-nocompression.sh
app.compression-worker-medium.compression-worker.workingDirectory=/tmp/compression
app.compression-worker-medium.compression-worker.compressionTimeout=4500
app.compression-worker-medium.compression-worker.requestTimeout=5000
app.compression-worker-medium.compression-worker.hostname=${HOSTNAME}

app.compression-worker-low.spring.cloud.stream.function.bindings.compress-in-0=input
app.compression-worker-low.spring.cloud.stream.function.bindings.compress-out-0=output
app.compression-worker-low.spring.cloud.stream.function.definition=compress
app.compression-worker-low.compression-worker.compression-command.s1=/app/zip-compression.sh
app.compression-worker-low.compression-worker.compression-command.s2=/app/tar-compression.sh
app.compression-worker-low.compression-worker.compression-command.s3=/app/zip-nocompression.sh
app.compression-worker-low.compression-worker.workingDirectory=/tmp/compression
app.compression-worker-low.compression-worker.compressionTimeout=4500
app.compression-worker-low.compression-worker.requestTimeout=5000
app.compression-worker-low.compression-worker.hostname=${HOSTNAME}

# Mandatory Deployer Settings
deployer.compression-filter.kubernetes.imagePullPolicy=IfNotPresent
deployer.compression-worker-high.kubernetes.imagePullPolicy=Always
deployer.compression-worker-high.kubernetes.imagePullSecrets=spring-cloud-dataflow-registry-dockersecret
deployer.compression-worker-medium.kubernetes.imagePullPolicy=Always
deployer.compression-worker-medium.kubernetes.imagePullSecrets=spring-cloud-dataflow-registry-dockersecret
deployer.compression-worker-low.kubernetes.imagePullPolicy=Always
deployer.compression-worker-low.kubernetes.imagePullSecrets=spring-cloud-dataflow-registry-dockersecret

# Liveness Probe
deployer.*.kubernetes.namespace=processing
deployer.*.kubernetes.livenessProbeDelay=10
deployer.*.kubernetes.livenessProbePeriod=120
deployer.*.kubernetes.livenessProbeTimeout=20
deployer.*.kubernetes.livenessProbePath=/actuator/health/liveness
deployer.*.kubernetes.livenessProbePort=8080

# Readiness Probe
deployer.*.kubernetes.readinessProbeDelay=10
deployer.*.kubernetes.readinessProbePeriod=120
deployer.*.kubernetes.readinessProbeTimeout=20
deployer.*.kubernetes.readinessProbePath=/actuator/health/readiness
deployer.*.kubernetes.readinessProbePort=8080

deployer.*.kubernetes.maxTerminatedErrorRestarts=20

# Additional Deployer Settings
deployer.*.kubernetes.environmentVariables=JAVA_TOOL_OPTIONS=-Xmx512m

deployer.compression-worker-high.count=1
deployer.priority-filter-high.count=1
deployer.compression-worker-high.kubernetes.secretKeyRefs=[{ envVarName: 'OBS_USERNAME', secretName: 'obs', dataKey: 'USER_ID' },{ envVarName: 'OBS_PASSWORD', secretName: 'obs', dataKey: 'USER_SECRET' }]

deployer.compression-worker-medium.count=2
deployer.priority-filter-medium.count=1
deployer.compression-worker-medium.kubernetes.secretKeyRefs=[{ envVarName: 'OBS_USERNAME', secretName: 'obs', dataKey: 'USER_ID' },{ envVarName: 'OBS_PASSWORD', secretName: 'obs', dataKey: 'USER_SECRET' }]

deployer.compression-worker-low.count=2
deployer.priority-filter-low.count=1
deployer.compression-worker-low.kubernetes.secretKeyRefs=[{ envVarName: 'OBS_USERNAME', secretName: 'obs', dataKey: 'USER_ID' },{ envVarName: 'OBS_PASSWORD', secretName: 'obs', dataKey: 'USER_SECRET' }]

deployer.*.kubernetes.affinity.nodeAffinity={ requiredDuringSchedulingIgnoredDuringExecution: { nodeSelectorTerms: [ { matchExpressions: [ { key: 'node-role.kubernetes.io/processing', operator: 'In', values: ['common']}]}]}}

# OBS properties
app.*.obs.user-id=${OBS_USERNAME}
app.*.obs.user-secret=${OBS_PASSWORD}
app.*.obs.endpoint=http://oss.eu-west-0.prod-cloud-ocb.orange-business.com
app.*.obs.endpoint-region=eu-west-0
app.*.obs.disable-chunked-encoding=false
app.*.obs.backoff-throttled-base-delay=6000
app.*.obs.bucket.auxiliary-file=ops-rs-auxiliary-files
app.*.obs.bucket.edrs-session=ops-rs-session-files
app.*.obs.bucket.plan-and-report=ops-rs-s1-plans-and-reports
app.*.obs.bucket.l0-slice=ops-rs-l0-slices
app.*.obs.bucket.l0-acn=ops-rs-l0-acns
app.*.obs.bucket.l0-segment=ops-rs-l0-segments
app.*.obs.bucket.l0-blank=ops-rs-l0-blanks
app.*.obs.bucket.l1-slice=ops-rs-s1-l1-slices
app.*.obs.bucket.l1-acn=ops-rs-s1-l1-acns
app.*.obs.bucket.l2-slice=ops-rs-s1-l2-slices
app.*.obs.bucket.l2-acn=ops-rs-s1-l2-acns
app.*.obs.bucket.spp-mbu=ops-rs-s1-spp-mbu
app.*.obs.bucket.spp-obs=ops-rs-s1-spp
app.*.obs.bucket.invalid=ops-rs-s1-invalid
app.*.obs.bucket.ghost=ops-rs-ghost
app.*.obs.bucket.debug=ops-rs-debug
app.*.obs.bucket.failed-workdir=ops-rs-failed-workdir
app.*.obs.bucket.session-retransfer=ops-rs-session-retransfer
app.*.obs.bucket.auxiliary-file-zip=ops-rs-auxiliary-files-zip
app.*.obs.bucket.l0-slice-zip=ops-rs-l0-slices-zip
app.*.obs.bucket.l0-acn-zip=ops-rs-l0-acns-zip
app.*.obs.bucket.l0-segment-zip=ops-rs-l0-segments-zip
app.*.obs.bucket.l0-blank-zip=ops-rs-l0-blanks-zip
app.*.obs.bucket.l1-slice-zip=ops-rs-s1-l1-slices-zip
app.*.obs.bucket.l1-acn-zip=ops-rs-s1-l1-acns-zip
app.*.obs.bucket.l2-slice-zip=ops-rs-s1-l2-slices-zip
app.*.obs.bucket.l2-acn-zip=ops-rs-s1-l2-acns-zip
app.*.obs.bucket.spp-obs-zip=ops-rs-spp-zip
app.*.obs.bucket.plan-and-report-zip=ops-rs-plans-and-reports-zip

app.*.obs.bucket.s2-aux=ops-rs-s2-aux
app.*.obs.bucket.s2-l0-gr=ops-rs-s2-l0-gr
app.*.obs.bucket.s2-l0-ds=ops-rs-s2-l0-ds
app.*.obs.bucket.s2-hktm=ops-rs-s2-hktm
app.*.obs.bucket.s2-sad=ops-rs-s2-sadata
app.*.obs.bucket.s2-l1a-gr=ops-rs-s2-l1-gr
app.*.obs.bucket.s2-l1a-ds=ops-rs-s2-l1-ds
app.*.obs.bucket.s2-l1b-gr=ops-rs-s2-l1-gr
app.*.obs.bucket.s2-l1b-ds=ops-rs-s2-l1-ds
app.*.obs.bucket.s2-l1c-tl=ops-rs-s2-l1-tl
app.*.obs.bucket.s2-l1c-tc=ops-rs-s2-l1-tc
app.*.obs.bucket.s2-l1c-ds=ops-rs-s2-l1-ds
app.*.obs.bucket.s2-l2a-tl=ops-rs-s2-l2-tl
app.*.obs.bucket.s2-l2a-tc=ops-rs-s2-l2-tc
app.*.obs.bucket.s2-l2a-ds=ops-rs-s2-l2-ds
app.*.obs.bucket.s2-aux-zip=ops-rs-s2-aux-zip
app.*.obs.bucket.s2-l0-gr-zip=ops-rs-s2-l0-gr-zip
app.*.obs.bucket.s2-l0-ds-zip=ops-rs-s2-l0-ds-zip
app.*.obs.bucket.s2-hktm-zip=ops-rs-s2-hktm-zip
app.*.obs.bucket.s2-sad-zip=ops-rs-s2-sadata-zip
app.*.obs.bucket.s2-l1a-gr-zip=ops-rs-s2-l1-gr-zip
app.*.obs.bucket.s2-l1a-ds-zip=ops-rs-s2-l1-ds-zip
app.*.obs.bucket.s2-l1b-gr-zip=ops-rs-s2-l1-gr-zip
app.*.obs.bucket.s2-l1b-ds-zip=ops-rs-s2-l1-ds-zip
app.*.obs.bucket.s2-l1c-tl-zip=ops-rs-s2-l1-tl-zip
app.*.obs.bucket.s2-l1c-tc-zip=ops-rs-s2-l1-tc-zip
app.*.obs.bucket.s2-l1c-ds-zip=ops-rs-s2-l1-ds-zip
app.*.obs.bucket.s2-l2a-tl-zip=ops-rs-s2-l2-tl-zip
app.*.obs.bucket.s2-l2a-tc-zip=ops-rs-s2-l2-tc-zip
app.*.obs.bucket.s2-l2a-ds-zip=ops-rs-s2-l2-ds-zip

app.*.obs.bucket.s3-granules=ops-rs-granules
app.*.obs.bucket.s3-aux=ops-rs-aux
app.*.obs.bucket.s3-l0=ops-rs-l0
app.*.obs.bucket.s3-l1-nrt=ops-rs-s3-l1-nrt
app.*.obs.bucket.s3-l1-stc=ops-rs-s3-l1-stc
app.*.obs.bucket.s3-l1-ntc=ops-rs-s3-l1-ntc
app.*.obs.bucket.s3-l2-nrt=ops-rs-s3-l2-nrt
app.*.obs.bucket.s3-l2-stc=ops-rs-s3-l2-stc
app.*.obs.bucket.s3-l2-ntc=ops-rs-s3-l2-ntc
app.*.obs.bucket.s3-cal=ops-rs-cal
app.*.obs.bucket.s3-pug=ops-rs-pug
app.*.obs.bucket.s3-granules-zip=ops-rs-granules-zip
app.*.obs.bucket.s3-aux-zip=ops-rs-aux-zip
app.*.obs.bucket.s3-l0-zip=ops-rs-l0-zip
app.*.obs.bucket.s3-l1-nrt-zip=ops-rs-s3-l1-nrt-zip
app.*.obs.bucket.s3-l1-stc-zip=ops-rs-s3-l1-stc-zip
app.*.obs.bucket.s3-l1-ntc-zip=ops-rs-s3-l1-ntc-zip
app.*.obs.bucket.s3-l2-nrt-zip=ops-rs-s3-l2-nrt-zip
app.*.obs.bucket.s3-l2-stc-zip=ops-rs-s3-l2-stc-zip
app.*.obs.bucket.s3-l2-ntc-zip=ops-rs-s3-l2-ntc-zip
app.*.obs.bucket.s3-cal-zip=ops-rs-cal-zip
app.*.obs.bucket.s3-pug-zip=ops-rs-pug-zip

# Common Application properties
app.*.common.rsChainName=COMPRESSION
app.*.common.rsChainVersion=1.15.0
version.message-filter=3.2.1
version.priority-filter-low=3.2.1
version.priority-filter-medium=3.2.1
version.priority-filter-high=3.2.1
version.compression-worker-low=1.15.0
version.compression-worker-medium=1.15.0
version.compression-worker-high=1.15.0
